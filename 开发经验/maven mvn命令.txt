1、mvn clean 清除生成的类，包

2、mvn eclipse:clean 清除.project文件

3、mvn eclipse:eclipse -Dwtpversion=2.0 生成eclipse工程，-Dwtpversion=2.0，选项指示生成的工程为WTP工程,

4、mvn package -DskipTests=true 打包，-DskipTests=true表示不执行junit测试

6、mvn dependency:tree

mvn war:inplace  这将释放依赖的 WAR 文件到 src/main/webapp 中去

mvn jetty:run-war 项目的 web 目录执行 mvn jetty:run-war

mvn release:prepare // 此命令会将工程发布到SCM服务器上，需要maven-scm-plugin插件的支持
mvn release:perform // 此命令会将工程发布到Maven仓库中
maven-release-plugin 版本发布插件
<distributionManagement>
    <repository>
        <id>nexus-releases</id>
        <name>Nexus Release Repository</name>
        <url>http://127.0.0.1:8081/nexus/content/repositories/releases/</url>
    </repository>
    <snapshotRepository>
        <id>nexus-snapshots</id>
        <name>Nexus Snapshot Repository</name>
        <url>http://127.0.0.1:8081/nexus/content/repositories/snapshots/</url>
    </snapshotRepository>
</distributionManagement>

<plugin>
    <artifactId>maven-release-plugin</artifactId>
    <version>2.3.2</version>
    <configuration>
        <autoVersionSubmodules>true</autoVersionSubmodules>
        <scmCommentPrefix></scmCommentPrefix>
    </configuration>
</plugin>

maven-scm-plugin 把工程打Tag后发布到SCM(Git、Svn)服务器上，SCM＝Software Configuration Management软件配置管理
<scm>
    <url>https://github.com/linguofeng/android-dynamic-loading-framework</url>
    <connection>scm:git:git://github.com/linguofeng/android-dynamic-loading-framework.git</connection>
    <developerConnection>scm:git:ssh://git@github.com/linguofeng/android-dynamic-loading-framework.git</developerConnection>
</scm>

<plugin>
    <artifactId>maven-scm-plugin</artifactId>
    <version>1.7</version>
    <configuration>
        <scmVersionType>branch</scmVersionType>
        <scmVersion>master</scmVersion>
    </configuration>
</plugin>


scm:branch - branch the project（创建项目的分支）
scm:validate - validate the scm information in the pom（校验SCM的配置信息）
scm:add - command to add file（增加一个文件）
scm:unedit - command to stop editing the working copy（停止编辑当前COPY）
scm:export - command to get a fresh exported copy（拉一个全新的分支）
scm:bootstrap - command to checkout and build a project（checkout并编译工程）
scm:changelog - command to show the source code revisions（显示源码版本）
scm:list - command for get the list of project files（列出工程的文件）
scm:checkin - command for commiting changes（提交变更）
scm:checkout - command for getting the source code（获取源码）
scm:status - command for showing the scm status of the working copy（获取本地项目的状态）
scm:update - command for updating the working copy with the latest changes（从服务器获取最新的版本）
scm:diff - command for showing the difference of the working copy with the remote one（比较本地与远程服务器的差异）
scm:update-subprojects - command for updating all projects in a multi project build（更新子项目）
scm:edit - command for starting edit on the working copy（编辑）
scm:tag - command for tagging a certain revision（打标签）